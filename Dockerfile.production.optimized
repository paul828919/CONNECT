# syntax=docker/dockerfile:1.4
# ===========================================
# Connect Platform - Optimized Production Dockerfile
# Multi-stage build with BuildKit caching
# ===========================================

# ========== Stage 1: Dependencies ==========
FROM node:20-alpine AS deps

# Install OpenSSL for Prisma
RUN apk add --no-cache \
    openssl \
    libc6-compat

WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.npm \
    npm ci --ignore-scripts --prefer-offline

# ========== Stage 2: Builder ==========
FROM node:20-alpine AS builder

RUN apk add --no-cache \
    openssl \
    libc6-compat

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Generate Prisma Client with cache
RUN --mount=type=cache,target=/root/.cache \
    npx prisma generate

# Build Next.js application
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV SKIP_ENV_VALIDATION=1

# Build with cache mount for Next.js
RUN --mount=type=cache,target=/app/.next/cache \
    npm run build

# ========== Stage 3: Pruner (Remove dev dependencies) ==========
FROM node:20-alpine AS pruner

WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./
COPY --from=builder /app/node_modules ./node_modules

# Install only production dependencies
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production --ignore-scripts --prefer-offline && \
    npm cache clean --force

# ========== Stage 4: Runner ==========
FROM node:20-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Install runtime dependencies only
RUN apk add --no-cache \
    curl \
    ca-certificates \
    openssl \
    tini

# Copy necessary files from builder
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json

# Copy standalone build
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy Prisma files
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

# Copy only production dependencies from pruner
COPY --from=pruner --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy lib directory (custom modules)
COPY --from=builder --chown=nextjs:nodejs /app/lib ./lib

# Copy app directory (source files)
COPY --from=builder --chown=nextjs:nodejs /app/app ./app

# Create directories for logs and uploads
RUN mkdir -p /app/logs /app/uploads && \
    chown -R nextjs:nodejs /app/logs /app/uploads

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1

# Use tini as entrypoint for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start application
CMD ["node", "server.js"]

# Labels for image metadata
LABEL maintainer="Connect Platform <dev@connectplt.kr>"
LABEL org.opencontainers.image.title="Connect Platform"
LABEL org.opencontainers.image.description="Government Funding Matching Platform"
LABEL org.opencontainers.image.version="1.0.0"

