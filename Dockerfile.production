# ===========================================
# Connect Platform - Production Dockerfile
# Multi-stage build for optimized images
# ===========================================

# ========== Stage 1: Dependencies ==========
FROM node:20-slim AS deps
RUN apt-get update && apt-get install -y \
    openssl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install ALL dependencies (needed for Next.js build)
# devDependencies like autoprefixer, tailwindcss, typescript are required for building
RUN npm ci --ignore-scripts

# ========== Stage 2: Builder ==========
FROM node:20-slim AS builder
RUN apt-get update && apt-get install -y \
    openssl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Generate Prisma Client
RUN npx prisma generate

# Build Next.js application
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production
# Skip static page generation for routes that need runtime data (MVP - optimize later)
ENV SKIP_ENV_VALIDATION 1

RUN npm run build

# ========== Stage 3: Runner ==========
FROM node:20-slim AS runner

WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Create non-root user with home directory
# --create-home ensures npm/npx have a writable home directory for cache/logs
RUN groupadd --system --gid 1001 nodejs && \
    useradd --system --create-home --uid 1001 --gid nodejs nextjs

# Install production dependencies and utilities
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    ca-certificates \
    openssl \
    && rm -rf /var/lib/apt/lists/*

# Copy necessary files from builder
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json

# Copy standalone build
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy Prisma files and CLI (including all dependencies)
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma
COPY --from=builder /app/node_modules/.bin ./node_modules/.bin

# Copy entrypoint script (before USER switch for proper permissions)
COPY docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

# Copy lib directory (custom modules not always traced by Next.js standalone)
# Using --chown to ensure correct permissions
COPY --from=builder --chown=nextjs:nodejs /app/lib ./lib

# Copy app directory (source files may be needed by some routes)
COPY --from=builder --chown=nextjs:nodejs /app/app ./app

# Create directories for logs and uploads
RUN mkdir -p /app/logs /app/uploads && \
    chown -R nextjs:nodejs /app/logs /app/uploads

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1

# Use entrypoint for container initialization (migrations â†’ app startup)
ENTRYPOINT ["/app/docker-entrypoint.sh"]