generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                       String  @id
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  users                    users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model audit_logs {
  id           String   @id
  userId       String?
  action       String
  resourceType String
  resourceId   String
  purpose      String?
  ipAddress    String?
  userAgent    String?
  requestPath  String?
  createdAt    DateTime @default(now())
  users        users?   @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@index([resourceType, resourceId])
  @@index([userId])
}

model consortium_members {
  id                  String              @id
  consortiumId        String
  organizationId      String
  invitedById         String
  role                ConsortiumRole
  budgetShare         BigInt?
  budgetPercent       Float?
  responsibilities    String?
  status              MemberStatus        @default(INVITED)
  invitedAt           DateTime            @default(now())
  respondedAt         DateTime?
  responseMessage     String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime
  consortium_projects consortium_projects @relation(fields: [consortiumId], references: [id], onDelete: Cascade)
  users               users               @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  organizations       organizations       @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([consortiumId, organizationId])
  @@index([consortiumId])
  @@index([organizationId])
  @@index([status])
}

model consortium_projects {
  id                 String               @id
  name               String
  description        String?
  targetProgramId    String?
  leadOrganizationId String
  createdById        String
  totalBudget        BigInt?
  projectDuration    String?
  startDate          DateTime?
  endDate            DateTime?
  status             ConsortiumStatus     @default(DRAFT)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  consortium_members consortium_members[]
  users              users                @relation(fields: [createdById], references: [id], onDelete: Cascade)
  organizations      organizations        @relation(fields: [leadOrganizationId], references: [id], onDelete: Cascade)
  funding_programs   funding_programs?    @relation(fields: [targetProgramId], references: [id])

  @@index([createdAt])
  @@index([createdById])
  @@index([leadOrganizationId])
  @@index([status])
  @@index([targetProgramId])
}

model contact_requests {
  id                                                          String               @id
  senderId                                                    String
  senderOrgId                                                 String
  receiverOrgId                                               String
  type                                                        ContactRequestType
  subject                                                     String
  message                                                     String
  status                                                      ContactRequestStatus @default(PENDING)
  responseMessage                                             String?
  respondedAt                                                 DateTime?
  createdAt                                                   DateTime             @default(now())
  updatedAt                                                   DateTime
  organizations_contact_requests_receiverOrgIdToorganizations organizations        @relation("contact_requests_receiverOrgIdToorganizations", fields: [receiverOrgId], references: [id], onDelete: Cascade)
  users                                                       users                @relation(fields: [senderId], references: [id], onDelete: Cascade)
  organizations_contact_requests_senderOrgIdToorganizations   organizations        @relation("contact_requests_senderOrgIdToorganizations", fields: [senderOrgId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([receiverOrgId])
  @@index([senderId])
  @@index([senderOrgId])
  @@index([status])
}

model daily_analytics {
  id                  String   @id
  date                DateTime @unique @db.Date
  totalUsers          Int      @default(0)
  activeUsers         Int      @default(0)
  newSignups          Int      @default(0)
  freeUsers           Int      @default(0)
  proUsers            Int      @default(0)
  teamUsers           Int      @default(0)
  conversionRate      Float    @default(0)
  churnCount          Int      @default(0)
  matchesGenerated    Int      @default(0)
  matchesViewed       Int      @default(0)
  matchesSaved        Int      @default(0)
  averageMatchScore   Float    @default(0)
  scrapingSuccessRate Float    @default(0)
  programsScraped     Int      @default(0)
  revenue             Int      @default(0)

  @@index([date])
}

model funding_matches {
  id                  String                @id
  organizationId      String
  programId           String
  score               Int                   @db.SmallInt
  explanation         Json
  viewed              Boolean               @default(false)
  saved               Boolean               @default(false)
  viewedAt            DateTime?
  savedAt             DateTime?
  notificationSent    Boolean               @default(false)
  notifiedAt          DateTime?
  createdAt           DateTime              @default(now())
  organizations       organizations         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  funding_programs    funding_programs      @relation(fields: [programId], references: [id], onDelete: Cascade)
  match_notifications match_notifications[]

  @@unique([organizationId, programId])
  @@index([createdAt])
  @@index([organizationId, score])
  @@index([programId])
  @@index([saved])
  @@index([viewed])
}

model funding_programs {
  id                  String                @id
  agencyId            AgencyId
  title               String
  description         String?
  announcementUrl     String
  targetType          OrganizationType[]
  minTrl              Int?                  @db.SmallInt
  maxTrl              Int?                  @db.SmallInt
  eligibilityCriteria Json?
  budgetAmount        BigInt?
  fundingPeriod       String?
  deadline            DateTime?
  category            String?
  keywords            String[]
  contentHash         String                @unique
  status              ProgramStatus         @default(ACTIVE)
  publishedAt         DateTime?
  scrapedAt           DateTime
  lastCheckedAt       DateTime              @default(now())
  scrapingSource      String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  consortium_projects consortium_projects[]
  funding_matches     funding_matches[]

  @@index([agencyId])
  @@index([deadline])
  @@index([scrapedAt])
  @@index([status])
  @@index([targetType])
}

model match_notifications {
  id              String           @id
  userId          String
  matchId         String
  type            NotificationType
  title           String
  message         String
  read            Boolean          @default(false)
  readAt          DateTime?
  emailSent       Boolean          @default(false)
  emailSentAt     DateTime?
  createdAt       DateTime         @default(now())
  funding_matches funding_matches  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  users           users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId, read])
}

model organizations {
  id                                                             String                @id
  type                                                           OrganizationType
  name                                                           String
  businessNumberEncrypted                                        String                @unique
  businessNumberHash                                             String                @unique
  businessStructure                                              BusinessStructure?
  description                                                    String?
  website                                                        String?
  logoUrl                                                        String?
  industrySector                                                 String?
  employeeCount                                                  EmployeeCountRange?
  revenueRange                                                   RevenueRange?
  rdExperience                                                   Boolean               @default(false)
  technologyReadinessLevel                                       Int?                  @db.SmallInt
  instituteType                                                  InstituteType?
  researchFocusAreas                                             String[]
  annualRdBudget                                                 String?
  researcherCount                                                Int?
  keyTechnologies                                                String[]
  collaborationHistory                                           Boolean               @default(false)
  primaryContactName                                             String?
  primaryContactEmail                                            String?
  primaryContactPhone                                            String?
  address                                                        String?
  profileCompleted                                               Boolean               @default(false)
  profileScore                                                   Int                   @default(0) @db.SmallInt
  status                                                         OrganizationStatus    @default(ACTIVE)
  verifiedAt                                                     DateTime?
  createdAt                                                      DateTime              @default(now())
  updatedAt                                                      DateTime
  consortium_members                                             consortium_members[]
  consortium_projects                                            consortium_projects[]
  contact_requests_contact_requests_receiverOrgIdToorganizations contact_requests[]    @relation("contact_requests_receiverOrgIdToorganizations")
  contact_requests_contact_requests_senderOrgIdToorganizations   contact_requests[]    @relation("contact_requests_senderOrgIdToorganizations")
  funding_matches                                                funding_matches[]
  users                                                          users[]
  ai_cost_logs                                                   ai_cost_logs[]

  @@index([businessNumberHash])
  @@index([profileCompleted])
  @@index([status])
  @@index([type])
}

model payments {
  id               String        @id
  subscriptionId   String
  amount           Int
  currency         String        @default("KRW")
  status           PaymentStatus
  tossPaymentKey   String?       @unique
  tossOrderId      String?
  tossMethod       String?
  paidAt           DateTime?
  failedAt         DateTime?
  refundedAt       DateTime?
  failureReason    String?
  retryCount       Int           @default(0) @db.SmallInt
  taxInvoiceIssued Boolean       @default(false)
  taxInvoiceNumber String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  subscriptions    subscriptions @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([paidAt])
  @@index([status])
  @@index([subscriptionId])
}

model scraping_logs {
  id              String    @id
  agencyId        AgencyId
  startedAt       DateTime
  completedAt     DateTime?
  duration        Int?
  success         Boolean
  programsFound   Int       @default(0) @db.SmallInt
  programsNew     Int       @default(0) @db.SmallInt
  programsUpdated Int       @default(0) @db.SmallInt
  error           String?
  errorDetails    Json?
  statusCode      Int?      @db.SmallInt
  userAgent       String?
  rateLimit       Boolean   @default(true)

  @@index([agencyId, startedAt])
  @@index([success])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model subscriptions {
  id                       String             @id
  userId                   String             @unique
  plan                     SubscriptionPlan
  status                   SubscriptionStatus
  billingCycle             BillingCycle       @default(MONTHLY)
  startedAt                DateTime
  expiresAt                DateTime
  canceledAt               DateTime?
  cancellationReason       String?
  amount                   Int
  currency                 String             @default("KRW")
  paymentMethod            String?
  tossBillingKey           String?            @unique
  tossCustomerId           String?
  lastPaymentId            String?
  nextBillingDate          DateTime?
  isBetaUser               Boolean            @default(false)
  betaDiscount             Int?
  betaExpiresAt            DateTime?
  taxInvoiceEmail          String?
  taxInvoiceBusinessNumber String?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime
  payments                 payments[]
  users                    users              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([plan])
  @@index([status])
}

model users {
  id                     String                @id
  email                  String?               @unique
  password               String?
  name                   String?
  role                   UserRole              @default(USER)
  organizationId         String?
  emailVerified          DateTime?
  emailNotifications     Boolean               @default(true)
  weeklyDigest           Boolean               @default(true)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime
  lastLoginAt            DateTime?
  image                  String?
  lastNotificationSentAt DateTime?
  notificationSettings   Json?
  accounts               accounts[]
  audit_logs             audit_logs[]
  consortium_members     consortium_members[]
  consortium_projects    consortium_projects[]
  contact_requests       contact_requests[]
  match_notifications    match_notifications[]
  sessions               sessions[]
  subscriptions          subscriptions?
  organizations          organizations?        @relation(fields: [organizationId], references: [id])
  ai_cost_logs           ai_cost_logs[]
  feedback               feedback[]

  @@index([email])
  @@index([organizationId])
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AgencyId {
  IITP
  KEIT
  TIPA
  KIMST
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}

enum BusinessStructure {
  CORPORATION
  SOLE_PROPRIETOR
}

enum ConsortiumRole {
  LEAD
  PARTICIPANT
  SUBCONTRACTOR
}

enum ConsortiumStatus {
  DRAFT
  ACTIVE
  READY
  SUBMITTED
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum ContactRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ContactRequestType {
  COLLABORATION
  CONSORTIUM_INVITE
  RESEARCH_PARTNER
  TECHNOLOGY_TRANSFER
  OTHER
}

enum EmployeeCountRange {
  UNDER_10
  FROM_10_TO_50
  FROM_50_TO_100
  FROM_100_TO_300
  OVER_300
}

enum InstituteType {
  GOVERNMENT_FUNDED
  PRIVATE_RESEARCH
  UNIVERSITY_ATTACHED
}

enum MemberStatus {
  INVITED
  ACCEPTED
  DECLINED
  REMOVED
}

enum NotificationType {
  NEW_MATCH
  DEADLINE_REMINDER_7DAYS
  DEADLINE_REMINDER_3DAYS
  DEADLINE_REMINDER_1DAY
  WEEKLY_DIGEST
}

enum OrganizationStatus {
  ACTIVE
  PENDING_VERIFICATION
  SUSPENDED
  DEACTIVATED
}

enum OrganizationType {
  COMPANY
  RESEARCH_INSTITUTE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ProgramStatus {
  ACTIVE
  EXPIRED
  ARCHIVED
}

enum RevenueRange {
  UNDER_1B
  FROM_1B_TO_10B
  FROM_10B_TO_50B
  FROM_50B_TO_100B
  OVER_100B
}

enum SubscriptionPlan {
  FREE
  PRO
  TEAM
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
  TRIAL
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AIServiceType {
  MATCH_EXPLANATION
  QA_CHAT
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
}

model ai_cost_logs {
  id            String        @id
  serviceType   AIServiceType
  userId        String?
  organizationId String?
  endpoint      String
  model         String
  inputTokens   Int
  outputTokens  Int
  totalTokens   Int
  costKRW       Float
  duration      Int          // milliseconds
  success       Boolean      @default(true)
  errorMessage  String?
  cacheHit      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  users         users?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  organizations organizations? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@index([createdAt])
  @@index([serviceType])
  @@index([userId])
  @@index([organizationId])
  @@index([success])
}

model ai_budget_alerts {
  id              String        @id
  date            DateTime      @db.Date
  severity        AlertSeverity
  threshold       Int           // Percentage (50, 80, 95)
  amountSpent     Float         // KRW
  dailyLimit      Float         // KRW
  percentage      Float         // Calculated percentage
  alertSent       Boolean       @default(false)
  alertSentAt     DateTime?
  recipientEmails String[]
  createdAt       DateTime      @default(now())

  @@index([date])
  @@index([severity])
  @@index([alertSent])
}

model feedback {
  id             String           @id
  userId         String?
  organizationId String?
  category       FeedbackCategory
  title          String
  description    String
  page           String?
  userAgent      String?
  screenshotUrl  String?
  priority       FeedbackPriority @default(MEDIUM)
  status         FeedbackStatus   @default(NEW)
  adminNotes     String?
  resolvedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  users          users?           @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([category])
  @@index([priority])
  @@index([status])
  @@index([createdAt])
}

enum FeedbackCategory {
  BUG
  FEATURE_REQUEST
  POSITIVE
  COMPLAINT
  QUESTION
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FeedbackStatus {
  NEW
  IN_REVIEW
  PLANNED
  IN_PROGRESS
  RESOLVED
  CLOSED
}
