# Development Services (PostgreSQL + Redis + Next.js App)

volumes:
  postgres_dev_data:
    driver: local

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: connect_dev_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://connect:connect_dev_password@postgres:5432/connect?schema=public
      REDIS_CACHE_URL: redis://redis-cache:6379/0
      REDIS_QUEUE_URL: redis://redis-queue:6379/0
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dev-secret-change-in-production-min-32-chars
      JWT_SECRET: dev-jwt-secret-change-in-production
      # Toss Payments - Test Mode (Week 9 Phase 3)
      TOSS_CLIENT_KEY: ${TOSS_CLIENT_KEY}
      TOSS_SECRET_KEY: ${TOSS_SECRET_KEY}
      TOSS_TEST_MODE: ${TOSS_TEST_MODE:-true}
      # Encryption (PIPA Compliance)
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      # Anthropic Claude AI Configuration
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ANTHROPIC_MODEL: ${ANTHROPIC_MODEL:-claude-sonnet-4-5-20250929}
      ANTHROPIC_MAX_TOKENS: ${ANTHROPIC_MAX_TOKENS:-4096}
      ANTHROPIC_TEMPERATURE: ${ANTHROPIC_TEMPERATURE:-0.7}
      # AI Rate Limiting & Budget
      AI_RATE_LIMIT_PER_MINUTE: ${AI_RATE_LIMIT_PER_MINUTE:-50}
      AI_DAILY_BUDGET_KRW: ${AI_DAILY_BUDGET_KRW:-50000}
      AI_CIRCUIT_BREAKER_THRESHOLD: ${AI_CIRCUIT_BREAKER_THRESHOLD:-5}
      AI_CIRCUIT_BREAKER_WINDOW: ${AI_CIRCUIT_BREAKER_WINDOW:-60000}
      AI_CIRCUIT_BREAKER_TIMEOUT: ${AI_CIRCUIT_BREAKER_TIMEOUT:-30000}
      AI_CIRCUIT_BREAKER_HALF_OPEN_MAX: ${AI_CIRCUIT_BREAKER_HALF_OPEN_MAX:-1}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
      redis-queue:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: connect_dev_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: connect
      POSTGRES_USER: connect
      POSTGRES_PASSWORD: connect_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U connect -d connect"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis-cache:
    image: redis:7-alpine
    container_name: connect_dev_redis_cache
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Redis Queue
  redis-queue:
    image: redis:7-alpine
    container_name: connect_dev_redis_queue
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
